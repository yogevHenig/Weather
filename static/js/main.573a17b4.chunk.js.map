{"version":3,"sources":["Components/WeatherCard/WeatherCard.js","App.js","serviceWorker.js","index.js"],"names":["WeatherCard","city","temperature","humidity","windspeed","iconURL","console","log","className","id","alt","src","width","hight","App","fetchDataByCity","index","targetUrl","fetch","then","res","text","data","temperatureIndex","substr","indexOf","length","humidityIndex","windspeedIndex","iconUrlStartIndex","iconUrlEndIndex","setState","city1","icon","city2","state","name1","name2","Humidity","Windspeed","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.573a17b4.chunk.js","sourcesContent":["import React from 'react';\nimport './WeatherCard.css';\n\nconst WeatherCard = ( {city, temperature, humidity, windspeed, iconURL}) => {\n  console.log(iconURL)\n  return (\n    <article className=\"br3 ba b--black-10 mv4 w-100 w-50-m w-25-l mw6 shadow-5 center\">\n      <main className=\"pa4 black-80\">\n        <div className=\"measure \">\n          <fieldset id=\"sign_up\" className=\"ba b--transparent ph0 mh0\">\n            <legend className=\"f1 fw6 ph0 mh0\">{city}</legend>\n            <div className=\"mt3\">\n              <label className=\"db fw6 lh-copy f6\">\n                {`Temprature: ${temperature} Â°C`}\n              </label>\n              <label className=\"db fw6 lh-copy f6\">\n                {`Humidity: ${humidity}%`}\n              </label>\n              <label className=\"db fw6 lh-copy f6\">\n                {`Windspeed: ${windspeed}Km/h`}\n              </label>\n              <img id='inputImg' alt='' src= { `https://${iconURL}` } width='100px' hight='100' />\n            </div>\n          </fieldset>\n        </div>\n      </main>\n    </article>\n  );\n\n}\n\nexport default WeatherCard;\n","import React, { Component } from 'react';\nimport './App.css';\nimport WeatherCard from './Components/WeatherCard/WeatherCard';\n\nimport ReactHtmlParser from 'react-html-parser';\n\n\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      name1: 'Tel-Aviv',\n      name2: 'New-York',\n      city1 : {\n        temperature: '',\n        Humidity: '',\n        Windspeed: '',\n        icon: '',\n      },\n      city2 : {\n        temperature: '',\n        Humidity: '',\n        Windspeed: '',\n        icon: ''\n      }\n    };\n  }\n\n  fetchDataByCity = (city, index) => {\n    var proxyUrl = 'https://cors-anywhere.herokuapp.com/',\n        targetUrl = `https://www.google.com/search?q=weather+${city}`\n    fetch(proxyUrl + targetUrl)\n    .then(res => res.text())\n    .then(data => {\n      data = data.substr(data.indexOf('Weather Result'))\n      let temperatureIndex = data.indexOf('id=\"wob_ttm\" style=\"display:none\">')\n      let temperature = data.substr(temperatureIndex + 'id=\"wob_ttm\" style=\"display:none\">'.length,2)\n      let humidityIndex = data.indexOf('<span id=\"wob_hm\">')\n      let humidity = data.substr(humidityIndex + '<span id=\"wob_hm\">'.length,2)\n      let windspeedIndex = data.indexOf('d=\"wob_tws\">')\n      let windspeed = data.substr(windspeedIndex + 'd=\"wob_tws\">'.length,2)\n\n      let iconUrlStartIndex = data.indexOf('gstatic');\n      let iconUrlEndIndex = iconUrlStartIndex\n      while (data[iconUrlEndIndex] + data[iconUrlEndIndex+1] + data[iconUrlEndIndex+2] !== 'png'){\n        iconUrlEndIndex++;\n      }\n\n      let iconURL = data.substr(iconUrlStartIndex, iconUrlEndIndex - iconUrlStartIndex + 3);\n      console.log(iconURL)\n      if (index === 1){\n        this.setState(\n            {\n              city1 : {\n                temperature: temperature,\n                humidity: humidity,\n                windspeed: windspeed,\n                icon: iconURL\n              }\n            }\n        )\n      } else {\n        this.setState(\n            {\n              city2 : {\n                temperature: temperature,\n                humidity: humidity,\n                windspeed: windspeed,\n                icon: iconURL\n              }\n            }\n        )\n      }\n    })\n  }\n\n  componentDidMount() {\n    this.fetchDataByCity(this.state.name1,1);\n    this.fetchDataByCity(this.state.name2,2);\n    // console.log('heeeelo',this.state.city1.icon)\n    // console.log(this.state.city2.icon)\n  }\n\n  render() {\n    return (\n\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={'https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcRfnS75QwwkgQCc01HRB3SQOQDrAbqCW4D_3g&usqp=CAU'} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Let's See Some weather!\n          </p>\n        </header>\n        <WeatherCard city = { this.state.name1 }\n          temperature = {this.state.city1.temperature}\n          humidity = {this.state.city1.humidity}\n          windspeed = {this.state.city1.windspeed}\n          iconURL = {this.state.city1.icon}\n        />\n        <WeatherCard city = { this.state.name2 }\n          temperature = {this.state.city2.temperature}\n          humidity = {this.state.city2.humidity}\n          windspeed = {this.state.city2.windspeed}\n          iconURL = {this.state.city2.icon}\n        />\n      </div>\n    );\n  }\n\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}