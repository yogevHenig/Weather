{"version":3,"sources":["Components/WeatherCard/WeatherCard.js","Components/SearchLocation/SearchLocation.js","App.js","serviceWorker.js","index.js"],"names":["WeatherCard","city","temperature","humidity","windspeed","iconURL","className","id","alt","src","width","hight","SearchLocation","onInputChange","onButtonSubmit","placeholder","type","onChange","onClick","App","fetchDataByCity","arr","a","targetUrl","fetch","rawData","text","data","substr","indexOf","temperatureIndex","length","split","filter","x","join","humidityIndex","windspeedIndex","iconUrlStartIndex","iconUrlEndIndex","cities","concat","name","icon","event","setState","input","target","value","state","then","removeCity","pop","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.aeecce60.chunk.js","sourcesContent":["import React from 'react';\nimport './WeatherCard.css';\n\nconst WeatherCard = ( {city, temperature, humidity, windspeed, iconURL}) => {\n  return (\n    <article className=\"br3 ba b--black-10 mv4 w-100 w-50-m w-25-l mw6 shadow-5 center\">\n      <main className=\"pa4 black-80\">\n        <div className=\"measure \">\n          <fieldset id=\"sign_up\" className=\"ba b--transparent ph0 mh0\">\n            <legend className=\"f1 fw6 ph0 mh0\">{city}</legend>\n            <div className=\"mt3\">\n              <label className=\"db fw6 lh-copy f6\">\n                {`Temprature: ${temperature} Â°C`}\n              </label>\n              <label className=\"db fw6 lh-copy f6\">\n                {`Humidity: ${humidity}%`}\n              </label>\n              <label className=\"db fw6 lh-copy f6\">\n                {`Windspeed: ${windspeed}Km/h`}\n              </label>\n              <img id='inputImg' alt='' src= { `https://${iconURL}` } width='64px' hight='64px' />\n            </div>\n          </fieldset>\n        </div>\n      </main>\n    </article>\n  );\n\n}\n\nexport default WeatherCard;\n","import React from 'react';\nimport './SearchLocation.css'\n\nconst SearchLocation = ({ onInputChange, onButtonSubmit}) => {\n\treturn (\n\t\t<div>\n\t\t\t<p className='f3' >\n\t\t\t {'This Magic will find your city weather. Give it a try!' }\n\t\t\t</p>\n\t\t\t<div className='center'>\n\t\t\t\t<div className='form2 center pa4 br3 shadow-5'>\n\t\t\t\t\t<input\n\t\t\t\t\t\tplaceholder='Enter a city name' className='f4 pa2 w-70 center' type='tex'\n\t\t\t\t\t\tonChange = { onInputChange }\n\t\t\t\t\t/>\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName='w-30 grow f4 link ph3 pv2 dib white bg-light-blue'\n\t\t\t\t\t\tonClick = { onButtonSubmit }\n\t\t\t\t\t>\n\t\t\t\t\t\tFind\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\n\t);\n}\n\nexport default SearchLocation;\n","import React, { Component } from 'react';\nimport './App.css';\nimport WeatherCard from './Components/WeatherCard/WeatherCard';\nimport SearchLocation from './Components/SearchLocation/SearchLocation';\n\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      cities: [],\n      city: [],\n      // city: {\n      //                       name: '',\n      //                       temperature: '',\n      //                       humidity: '',\n      //                       windspeed: '',\n      //                       icon: ''\n      //                     },\n      input: ''\n    }\n\n  }\n\n  fetchDataByCity = async (city, arr) => {\n\n    var proxyUrl = 'https://cors-anywhere.herokuapp.com/',\n        targetUrl = `https://www.google.com/search?q=weather+${city}`\n    let rawData = await fetch(proxyUrl + targetUrl);\n    let data =  await rawData.text();\n    data = data.substr(data.indexOf('Weather Result'))\n    let temperatureIndex = data.indexOf('id=\"wob_ttm\" style=\"display:none\">')\n    let temperature = data.substr(temperatureIndex + 'id=\"wob_ttm\" style=\"display:none\">'.length,2).split('').filter(x => x >= 0 && x <= 9).join('')\n    let humidityIndex = data.indexOf('<span id=\"wob_hm\">')\n    let humidity = data.substr(humidityIndex + '<span id=\"wob_hm\">'.length,2)\n    let windspeedIndex = data.indexOf('d=\"wob_tws\">')\n    let windspeed = data.substr(windspeedIndex + 'd=\"wob_tws\">'.length,2)\n    let iconUrlStartIndex = data.indexOf('gstatic');\n    let iconUrlEndIndex = iconUrlStartIndex\n    while (data[iconUrlEndIndex] + data[iconUrlEndIndex+1] + data[iconUrlEndIndex+2] !== 'png'){\n        iconUrlEndIndex++;\n    }\n\n    let iconURL = data.substr(iconUrlStartIndex, iconUrlEndIndex - iconUrlStartIndex + 3);\n    const cities = arr.concat([{\n                          name: city,\n                          temperature: temperature,\n                          humidity: humidity,\n                          windspeed: windspeed,\n                          icon: iconURL\n                        }])\n    return cities\n}\n\n  componentDidMount() {\n    this.fetchDataByCity(\"Tel-Aviv\",[]).then(cities => {\n      this.fetchDataByCity(\"New-York\",cities)\n      .then (cities => {\n        this.setState({ cities })\n      })\n    })\n    //cities = this.fetchDataByCity(\"New-York\",cities);\n    //this.setState({ cities })\n  }\n\n  onInputChange = (event) => {\n    this.setState({ input: event.target.value })\n  }\n\n  onButtonSubmit = (event) =>{\n    this.fetchDataByCity(this.state.input,[])\n    .then(city => {\n       this.setState({ city })\n     })\n    }\n\n  removeCity = () => {\n    const city = this.state.city;\n    city.pop();\n    this.setState({ city })\n  }\n\n\n  render() {\n    return (\n\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={'https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcRfnS75QwwkgQCc01HRB3SQOQDrAbqCW4D_3g&usqp=CAU'} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Let's See Some Weather!\n          </p>\n        </header>\n        <div className=\"AppBody\">\n          <WeatherCard city = { (this.state.cities[0]) ? (this.state.cities[0]).name : ''  }\n            temperature = { (this.state.cities[0]) ? (this.state.cities[0]).temperature : ''}\n            humidity = { (this.state.cities[0]) ? this.state.cities[0].humidity : ''}\n            windspeed = { (this.state.cities[0]) ? this.state.cities[0].windspeed: ''}\n            iconURL = { (this.state.cities[0]) ? this.state.cities[0].icon : ''}\n          />\n          <WeatherCard city = { (this.state.cities[1]) ? (this.state.cities[1]).name : ''  }\n            temperature = {(this.state.cities[1]) ? (this.state.cities[1]).temperature : ''}\n            humidity = { (this.state.cities[1]) ? this.state.cities[1].humidity : ''}\n            windspeed = { (this.state.cities[1]) ? this.state.cities[1].windspeed: ''}\n            iconURL = { (this.state.cities[1]) ? this.state.cities[1].icon : ''}\n          />\n        </div>\n          <SearchLocation onButtonSubmit = { this.onButtonSubmit }  onInputChange = { this.onInputChange } />\n          {\n            this.state.city.length !== 0 ?\n              <div>\n                <WeatherCard city = { (this.state.city[0]) ? (this.state.city[0]).name : ''  }\n                  temperature = {(this.state.city[0]) ? (this.state.city[0]).temperature : ''}\n                  humidity = { (this.state.city[0]) ? this.state.city[0].humidity : ''}\n                  windspeed = { (this.state.city[0]) ? this.state.city[0].windspeed: ''}\n                  iconURL = { (this.state.city[0]) ? this.state.city[0].icon : ''}\n                />\n              </div>\n              :\n              <div></div>\n          }\n      </div>\n    );\n  }\n\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}