{"version":3,"sources":["Components/WeatherCard/WeatherCard.js","Components/SearchLocation/SearchLocation.js","App.js","serviceWorker.js","index.js"],"names":["WeatherCard","city","temperature","humidity","windspeed","iconURL","className","id","alt","src","width","hight","SearchLocation","onInputChange","onButtonSubmit","placeholder","type","onChange","onClick","App","fetchDataByCity","a","console","log","targetUrl","fetch","headers","rawData","text","data","length","Error","startIndex","indexOf","substr","temperatureIndex","split","filter","x","join","humidityIndex","windspeedIndex","iconUrlStartIndex","iconUrlEndIndex","substring","result","name","icon","event","setState","input","target","value","state","cities","undefined","this","city1","city2","map","i","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8TA8BeA,G,YA3BK,SAAC,GAAwD,IAAtDC,EAAqD,EAArDA,KAAMC,EAA+C,EAA/CA,YAAaC,EAAkC,EAAlCA,SAAUC,EAAwB,EAAxBA,UAAWC,EAAa,EAAbA,QAC7D,OACE,6BAASC,UAAU,qEACjB,0BAAMA,UAAU,gBACd,yBAAKA,UAAU,YACb,8BAAUC,GAAG,UAAUD,UAAU,6BAC/B,4BAAQA,UAAU,kBAAkBL,GACpC,yBAAKK,UAAU,OACb,2BAAOA,UAAU,qBAAjB,sBACkBJ,EADlB,WAGA,2BAAOI,UAAU,qBAAjB,oBACgBH,EADhB,MAGA,2BAAOG,UAAU,qBAAjB,qBACiBF,EADjB,SAGA,yBAAKG,GAAG,WAAWC,IAAI,GAAGC,IAAG,kBAAeJ,GAAYK,MAAM,OAAOC,MAAM,gBCQ1EC,G,MAzBQ,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,cAAeC,EAAoB,EAApBA,eACxC,OACC,6BACC,uBAAGR,UAAU,MACX,0DAEF,yBAAKA,UAAU,aACd,yBAAKA,UAAU,oCACd,2BACCS,YAAY,oBAAoBT,UAAU,qBAAqBU,KAAK,MACpEC,SAAaJ,IAEd,4BACCP,UAAU,yCACVY,QAAYJ,GAFb,aCyHUK,E,kDAjIb,aAAc,IAAD,8BACX,gBASFC,gBAVa,uCAUK,WAAOnB,GAAP,yCAAAoB,EAAA,6DAChBC,QAAQC,IAAI,iBAAkBtB,GACf,uCACXuB,EAHY,kDAG2CvB,GAH3C,kBAKMwB,MAHP,uCAGwBD,EAAW,CACjDE,QAAS,CACP,8BAA+B,2CAPlB,cAKVC,EALU,gBAUIA,EAAQC,OAVZ,WAUVC,EAVU,QAWJC,OAXI,uBAYNC,MAAM,YAZA,WAedT,QAAQC,IAAI,kBAGQ,KADhBS,EAAaH,EAAKI,QAAQ,qBAE5BD,EAAaH,EAAKI,QAAQ,oCAER,IAAhBD,EArBU,uBAsBND,MAAM,eAtBA,eAyBdF,EAAOA,EAAKK,OAAOF,GAEfG,EAAmBN,EAAKI,QAAQ,sCAChC/B,EAAc2B,EAAKK,OAAOC,EAAmB,qCAAqCL,OAAO,GAAGM,MAAM,IAAIC,QAAO,SAAAC,GAAC,OAAIA,GAAK,GAAKA,GAAK,KAAGC,KAAK,IACzIC,EAAgBX,EAAKI,QAAQ,sBAC7B9B,EAAW0B,EAAKK,OAAOM,EAAgB,qBAAqBV,OAAO,GACnEW,EAAiBZ,EAAKI,QAAQ,gBAC9B7B,EAAYyB,EAAKK,OAAOO,EAAiB,eAAeX,OAAO,GAC/DY,EAAoBb,EAAKI,QAAQ,WACjCU,EAAkBd,EAAKK,OAAOQ,GAAmBT,QAAQ,OACzD5B,EAAUwB,EAAKe,UAAUF,EAAmBC,EAAkBD,EAAoB,GAEhFG,EAAS,CACDC,KAAM7C,EACNC,YAAaA,EACbC,SAAUA,EACVC,UAAWA,EACX2C,KAAM1C,GAEpBiB,QAAQC,IAAI,WAAYtB,GA5CV,kBA6CP4C,GA7CO,kCAgDdvB,QAAQC,IAAR,MAhDc,0DAVL,wDAsEbV,cAAgB,SAACmC,GACf,EAAKC,SAAS,CAAEC,MAAOF,EAAMG,OAAOC,SAvEzB,EA0EbtC,eA1Ea,uCA0EI,WAAOkC,GAAP,eAAA3B,EAAA,sEACE,EAAKD,gBAAgB,EAAKiC,MAAMH,OADlC,OACXjD,EADW,OAEf,EAAKgD,SAAS,CAAEhD,SAFD,2CA1EJ,sDAEX,EAAKoD,MAAQ,CACXC,OAAQ,GACRrD,UAAMsD,EACNL,MAAO,IALE,E,oMAgEOM,KAAKpC,gBAAgB,Y,cAAnCqC,E,gBACcD,KAAKpC,gBAAgB,Y,OAAnCsC,E,OACAJ,EAAS,CAAEG,EAAOC,GACtBF,KAAKP,SAAS,CAAEK,W,qIAYR,IAAD,OACP,OAEE,yBAAKhD,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKG,IAAK,wGAAyGH,UAAU,WAAWE,IAAI,SAC5I,uDAKiC,IAA7BgD,KAAKH,MAAMC,OAAOxB,OAChB,0CAEF,yBAAKxB,UAAU,WAEbkD,KAAKH,MAAMC,OAAOK,KAAI,SAAC1D,EAAO2D,GAC5B,OACI,kBAAC,EAAD,CACEC,IAAQD,EACR3D,KAAS,EAAKoD,MAAMC,OAAOM,GAAGd,KAC9B5C,YAAgB,EAAKmD,MAAMC,OAAOM,GAAG1D,YACrCC,SAAa,EAAKkD,MAAMC,OAAOM,GAAGzD,SAClCC,UAAc,EAAKiD,MAAMC,OAAOM,GAAGxD,UACnCC,QAAY,EAAKgD,MAAMC,OAAOM,GAAGb,WAO/C,kBAAC,EAAD,CAAgBjC,eAAmB0C,KAAK1C,eAAkBD,cAAkB2C,KAAK3C,qBAE3D0C,IAApBC,KAAKH,MAAMpD,KACT,6BACE,kBAAC,EAAD,CAAaA,KAASuD,KAAKH,MAAMpD,KAAK6C,KACpC5C,YAAgBsD,KAAKH,MAAMpD,KAAKC,YAChCC,SAAaqD,KAAKH,MAAMpD,KAAKE,SAC7BC,UAAcoD,KAAKH,MAAMpD,KAAKG,UAC9BC,QAAYmD,KAAKH,MAAMpD,KAAK8C,QAIhC,mC,GA3HIe,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1D,QAAQ0D,MAAMA,EAAMC,c","file":"static/js/main.55db8078.chunk.js","sourcesContent":["import React from 'react';\nimport './WeatherCard.css';\n\nconst WeatherCard = ( {city, temperature, humidity, windspeed, iconURL}) => {\n  return (\n    <article className=\"br3 ba b--black-10 mv4 w-100 w-50-m w-25-l mw6 shadow-5 center lg\">\n      <main className=\"pa4 black-80\">\n        <div className=\"measure \">\n          <fieldset id=\"sign_up\" className=\"ba b--transparent ph0 mh0\">\n            <legend className=\"f1 fw6 ph0 mh0\">{city}</legend>\n            <div className=\"mt3\">\n              <label className=\"db fw6 lh-copy f6\">\n                {`Temprature: ${temperature} °C`}\n              </label>\n              <label className=\"db fw6 lh-copy f6\">\n                {`Humidity: ${humidity}%`}\n              </label>\n              <label className=\"db fw6 lh-copy f6\">\n                {`Windspeed: ${windspeed}Km/h`}\n              </label>\n              <img id='inputImg' alt='' src= { `https://${iconURL}` } width='64px' hight='64px' />\n            </div>\n          </fieldset>\n        </div>\n      </main>\n    </article>\n  );\n\n}\n\nexport default WeatherCard;\n","import React from 'react';\nimport './SearchLocation.css'\n\nconst SearchLocation = ({ onInputChange, onButtonSubmit}) => {\n\treturn (\n\t\t<div>\n\t\t\t<p className='f3' >\n\t\t\t {'This Magic will find your city weather. Give it a try!' }\n\t\t\t</p>\n\t\t\t<div className='center lg'>\n\t\t\t\t<div className='form2 center pa4 br3 shadow-5 lg'>\n\t\t\t\t\t<input\n\t\t\t\t\t\tplaceholder='Enter a city name' className='f4 pa2 w-70 center' type='tex'\n\t\t\t\t\t\tonChange = { onInputChange }\n\t\t\t\t\t/>\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName='w-30 grow f4 link ph3 pv2 dib white lg'\n\t\t\t\t\t\tonClick = { onButtonSubmit }\n\t\t\t\t\t>\n\t\t\t\t\t\tFind\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\n\t);\n}\n\nexport default SearchLocation;\n","import React, { Component } from 'react';\nimport './App.css';\nimport WeatherCard from './Components/WeatherCard/WeatherCard';\nimport SearchLocation from './Components/SearchLocation/SearchLocation';\n\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      cities: [],\n      city: undefined,\n      input: ''\n    }\n\n  }\n\n  fetchDataByCity = async (city) => {\n    console.log('fetch data for', city)\n    var proxyUrl = 'https://cors-anywhere.herokuapp.com/',\n        targetUrl = `https://www.google.com/search?q=weather+${city}`\n    try {\n      let rawData = await fetch(proxyUrl + targetUrl, {\n  \t\t\theaders: {\n  \t\t\t \t'Access-Control-Allow-Origin': 'https://yogevhenig.github.io/weather/'\n  \t\t\t}\n  \t\t})\n      let data =  await rawData.text();\n      if (!data.length){\n        throw Error(\"no data!\")\n      }\n\n      console.log('data recieved')\n\n      let startIndex = data.indexOf('Weather Result')\n      if (startIndex === -1){\n        startIndex = data.indexOf('תוצאת')\n      }\n      if (startIndex === -1){\n        throw Error(\"wrong data!\")\n      }\n\n      data = data.substr(startIndex)\n\n      let temperatureIndex = data.indexOf('id=\"wob_ttm\" style=\"display:none\">')\n      let temperature = data.substr(temperatureIndex + 'id=\"wob_ttm\" style=\"display:none\">'.length,2).split('').filter(x => x >= 0 && x <= 9).join('')\n      let humidityIndex = data.indexOf('<span id=\"wob_hm\">')\n      let humidity = data.substr(humidityIndex + '<span id=\"wob_hm\">'.length,2)\n      let windspeedIndex = data.indexOf('d=\"wob_tws\">')\n      let windspeed = data.substr(windspeedIndex + 'd=\"wob_tws\">'.length,2)\n      let iconUrlStartIndex = data.indexOf('gstatic');\n      let iconUrlEndIndex = data.substr(iconUrlStartIndex).indexOf('png')\n      let iconURL = data.substring(iconUrlStartIndex, iconUrlEndIndex + iconUrlStartIndex + 3); // 3 for the 'png'\n\n      const result = {\n                    name: city,\n                    temperature: temperature,\n                    humidity: humidity,\n                    windspeed: windspeed,\n                    icon: iconURL\n                  }\n      console.log('finished', city);\n      return result\n    }\n    catch (err){\n      console.log(err)\n    }\n\n}\n\n  async componentDidMount()  {\n    let city1 = await this.fetchDataByCity(\"Tel-Aviv\");\n    let city2 = await this.fetchDataByCity(\"New-York\");\n    let cities = [ city1, city2 ]\n    this.setState({ cities });\n  }\n\n  onInputChange = (event) => {\n    this.setState({ input: event.target.value })\n  }\n\n  onButtonSubmit = async (event) =>{\n    let city = await this.fetchDataByCity(this.state.input);\n    this.setState({ city })\n    }\n\n  render() {\n    return (\n\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={'https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcRfnS75QwwkgQCc01HRB3SQOQDrAbqCW4D_3g&usqp=CAU'} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Let's See Some Weather!\n          </p>\n        </header>\n    \t  \t\t{\n              this.state.cities.length === 0 ?\n                <h1>Loading...</h1>\n              :\n              <div className=\"AppBody\">\n              {\n                this.state.cities.map((city , i ) => {\n                  return (\n                      <WeatherCard\n                        key = { i }\n                        city = { this.state.cities[i].name }\n                        temperature = { this.state.cities[i].temperature }\n                        humidity = { this.state.cities[i].humidity }\n                        windspeed = { this.state.cities[i].windspeed }\n                        iconURL = { this.state.cities[i].icon }\n                      />\n                  )\n                })\n              }\n              </div>\n      \t\t\t}\n          <SearchLocation onButtonSubmit = { this.onButtonSubmit }  onInputChange = { this.onInputChange } />\n          {\n            this.state.city !== undefined ?\n              <div>\n                <WeatherCard city = { this.state.city.name }\n                  temperature = { this.state.city.temperature }\n                  humidity = { this.state.city.humidity}\n                  windspeed = { this.state.city.windspeed }\n                  iconURL = { this.state.city.icon}\n                />\n              </div>\n              :\n              <div></div>\n          }\n      </div>\n    );\n  }\n\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}